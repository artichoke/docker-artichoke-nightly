---
name: Docker Image CI
"on":
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk
  schedule:
    - cron: "0 0 * * *" # build nightly!

jobs:
  nightly:
    name: Nightly
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build:
          - alpine
          - debian
          - ubuntu
        include:
          - build: alpine
            target_triple: x86_64-unknown-linux-musl
            dockerfile: alpine/Dockerfile
            tag_bare: alpine
            tag_version: alpine3
          - build: debian
            target_triple: x86_64-unknown-linux-gnu
            dockerfile: debian/bullseye/slim/Dockerfile
            tag_bare: slim
            tag_version: slim-bullseye
          - build: ubuntu
            target_triple: x86_64-unknown-linux-gnu
            dockerfile: ubuntu/focal/Dockerfile
            tag_bare: ubuntu
            tag_version: ubuntu-focal

    steps:
      - uses: actions/checkout@v3

      - name: Clone Artichoke
        uses: actions/checkout@v3
        with:
          repository: artichoke/artichoke
          path: artichoke

      - name: Set Artichoke latest commit
        id: latest
        working-directory: artichoke
        run: |
          echo "Artichoke git ref: $(git rev-parse HEAD)"
          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Set Artichoke Rust toolchain version
        id: rust_toolchain
        working-directory: artichoke
        run: |
          echo "Rust toolchain version: $(cat rust-toolchain)"
          echo "::set-output name=version::$(cat rust-toolchain)"

      - name: Generate THIRDPARTY license listing
        id: generate_third_party
        uses: artichoke/generate_third_party@trunk
        with:
          artichoke_ref: ${{ steps.latest.outputs.commit }}
          target_triple: ${{ matrix.target_triple }}

      - name: Output THIRDPARTY listing
        run: |
          echo "${{ steps.generate_third_party.outputs.third_party_licenses }}" > THIRDPARTY

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.ref == 'refs/heads/trunk' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.ref == 'refs/heads/trunk' }}
          tags: |
            artichokeruby/artichoke:latest
            artichokeruby/artichoke:${{ steps.latest.outputs.commit }}
            artichokeruby/artichoke:${{ matrix.tag_bare }}-nightly
            artichokeruby/artichoke:${{ matrix.tag_version }}-nightly
            artichokeruby/artichoke:${{ matrix.tag_bare }}-nightly-${{ steps.latest.outputs.commit }}
          build-args: |
            ARTICHOKE_NIGHTLY_VER=${{ steps.latest.outputs.commit }}
            RUST_VERSION=${{ steps.rust_toolchain.outputs.version }}

      - name: Build and push Docker images (Ubuntu extra tags)
        uses: docker/build-push-action@v3
        if: ${{ matrix.build }} == 'ubuntu'
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.ref == 'refs/heads/trunk' }}
          tags: |
            artichokeruby/artichoke:latest
            artichokeruby/artichoke:${{ steps.latest.outputs.commit }}
            artichokeruby/artichoke:ubuntu20.04-nightly
          build-args: |
            ARTICHOKE_NIGHTLY_VER=${{ steps.latest.outputs.commit }}
            RUST_VERSION=${{ steps.rust_toolchain.outputs.version }}
